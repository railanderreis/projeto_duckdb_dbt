{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.4", "generated_at": "2023-12-27T16:03:19.564078Z", "invocation_id": "6da180de-64c0-49e3-ada8-91b524639d7d", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-27T16:03:16.560980Z", "completed_at": "2023-12-27T16:03:16.591011Z"}, {"name": "execute", "started_at": "2023-12-27T16:03:16.597012Z", "completed_at": "2023-12-27T16:03:16.857022Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.3310110569000244, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.retail.dim_customer", "compiled": true, "compiled_code": "-- Create the dimension table\nWITH customer_cte AS (\n\tSELECT DISTINCT\n\t    md5(cast(coalesce(cast(CustomerID as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(Country as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as customer_id,\n\t    Country AS country\n\tFROM \"retail\".\"main\".\"raw_invoices\"\n\tWHERE CustomerID IS NOT NULL\n)\nSELECT\n    t.*,\n\tcm.iso\nFROM customer_cte t\nLEFT JOIN \"retail\".\"main\".\"country\" cm ON t.country = cm.nicename", "relation_name": "\"retail\".\"main\".\"dim_customer\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-27T16:03:16.908021Z", "completed_at": "2023-12-27T16:03:16.914991Z"}, {"name": "execute", "started_at": "2023-12-27T16:03:16.920991Z", "completed_at": "2023-12-27T16:03:17.048995Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.16497302055358887, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.retail.dim_datetime", "compiled": true, "compiled_code": "-- Create a CTE to extract date and time components\nWITH datetime_cte AS (  \n  SELECT DISTINCT\n    InvoiceDate AS datetime_id,\n  FROM \"retail\".\"main\".\"raw_invoices\"\n  WHERE InvoiceDate IS NOT NULL\n)\nSELECT\n  datetime_id,\n  EXTRACT(YEAR FROM datetime_id) AS year,\n  EXTRACT(MONTH FROM datetime_id) AS month,\n  EXTRACT(DAY FROM datetime_id) AS day,\n  EXTRACT(HOUR FROM datetime_id) AS hour,\n  EXTRACT(MINUTE FROM datetime_id) AS minute,\n  EXTRACT(DAYOFWEEK FROM datetime_id) AS weekda\nFROM datetime_cte", "relation_name": "\"retail\".\"main\".\"dim_datetime\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-27T16:03:17.087996Z", "completed_at": "2023-12-27T16:03:17.099000Z"}, {"name": "execute", "started_at": "2023-12-27T16:03:17.105028Z", "completed_at": "2023-12-27T16:03:17.373006Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.3330109119415283, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.retail.dim_product", "compiled": true, "compiled_code": "-- dim_product.sql\n-- StockCode isn't unique, a product with the same id can have different and prices\n-- Create the dimension table\nSELECT DISTINCT\n    md5(cast(coalesce(cast(StockCode as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(Description as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(UnitPrice as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as product_id,\n\t\tStockCode AS stock_code,\n    Description AS description,\n    UnitPrice AS price\nFROM \"retail\".\"main\".\"raw_invoices\"\nWHERE StockCode IS NOT NULL\nAND UnitPrice > 0", "relation_name": "\"retail\".\"main\".\"dim_product\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-27T16:03:17.440008Z", "completed_at": "2023-12-27T16:03:17.452008Z"}, {"name": "execute", "started_at": "2023-12-27T16:03:17.458008Z", "completed_at": "2023-12-27T16:03:18.359040Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.939063549041748, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.retail.fct_invoices", "compiled": true, "compiled_code": "-- Create the fact table by joining the relevant keys from dimension table\nWITH fct_invoices_cte AS (\n    SELECT\n        InvoiceNo AS invoice_id,\n        InvoiceDate AS datetime_id,\n        md5(cast(coalesce(cast(StockCode as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(Description as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(UnitPrice as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as product_id,\n        md5(cast(coalesce(cast(CustomerID as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(Country as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as customer_id,\n        Quantity AS quantity,\n        Quantity * UnitPrice AS total\n    FROM \"retail\".\"main\".\"raw_invoices\"\n    WHERE Quantity > 0\n)\nSELECT\n    invoice_id,\n    dt.datetime_id,\n    dp.product_id,\n    dc.customer_id,\n    quantity,\n    total\nFROM fct_invoices_cte fi\nINNER JOIN \"retail\".\"main\".\"dim_datetime\" dt ON fi.datetime_id = dt.datetime_id\nINNER JOIN \"retail\".\"main\".\"dim_product\" dp ON fi.product_id = dp.product_id\nINNER JOIN \"retail\".\"main\".\"dim_customer\" dc ON fi.customer_id = dc.customer_id", "relation_name": "\"retail\".\"main\".\"fct_invoices\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-27T16:03:18.395042Z", "completed_at": "2023-12-27T16:03:18.402073Z"}, {"name": "execute", "started_at": "2023-12-27T16:03:18.408071Z", "completed_at": "2023-12-27T16:03:18.712081Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.34301137924194336, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.retail.report_customer_invoices", "compiled": true, "compiled_code": "-- report_customer_invoices.sql\nSELECT\n  c.country,\n  c.iso,\n  COUNT(fi.invoice_id) AS total_invoices,\n  SUM(fi.total) AS total_revenue\nFROM \"retail\".\"main\".\"fct_invoices\" fi\nJOIN \"retail\".\"main\".\"dim_customer\" c ON fi.customer_id = c.customer_id\nGROUP BY c.country, c.iso\nORDER BY total_revenue DESC\nLIMIT 10", "relation_name": "\"retail\".\"main\".\"report_customer_invoices\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-27T16:03:18.756052Z", "completed_at": "2023-12-27T16:03:18.763053Z"}, {"name": "execute", "started_at": "2023-12-27T16:03:18.770051Z", "completed_at": "2023-12-27T16:03:19.050060Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.3220100402832031, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.retail.report_product_invoices", "compiled": true, "compiled_code": "-- report_product_invoices.sql\nSELECT\n  p.product_id,\n  p.stock_code,\n  p.description,\n  SUM(fi.quantity) AS total_quantity_sold\nFROM \"retail\".\"main\".\"fct_invoices\" fi\nJOIN \"retail\".\"main\".\"dim_product\" p ON fi.product_id = p.product_id\nGROUP BY p.product_id, p.stock_code, p.description\nORDER BY total_quantity_sold DESC\nLIMIT 10", "relation_name": "\"retail\".\"main\".\"report_product_invoices\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-27T16:03:19.091063Z", "completed_at": "2023-12-27T16:03:19.098093Z"}, {"name": "execute", "started_at": "2023-12-27T16:03:19.104095Z", "completed_at": "2023-12-27T16:03:19.361071Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.2940096855163574, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.retail.report_year_invoices", "compiled": true, "compiled_code": "-- report_year_invoices.sql\nSELECT\n  dt.year,\n  dt.month,\n  COUNT(DISTINCT fi.invoice_id) AS num_invoices,\n  SUM(fi.total) AS total_revenue\nFROM \"retail\".\"main\".\"fct_invoices\" fi\nJOIN \"retail\".\"main\".\"dim_datetime\" dt ON fi.datetime_id = dt.datetime_id\nGROUP BY dt.year, dt.month\nORDER BY dt.year, dt.month", "relation_name": "\"retail\".\"main\".\"report_year_invoices\""}], "elapsed_time": 3.2431395053863525, "args": {"select": [], "indirect_selection": "eager", "log_path": "C:\\Users\\19001196\\Documents\\projetos_py\\duckdb_soda_dbt\\dbt\\logs", "populate_cache": true, "version_check": true, "favor_state": false, "static_parser": true, "log_format": "default", "log_level_file": "debug", "warn_error_options": {"include": [], "exclude": []}, "show_resource_report": false, "log_file_max_bytes": 10485760, "log_level": "info", "use_colors_file": true, "partial_parse_file_diff": true, "strict_mode": false, "profiles_dir": "C:\\Users\\19001196\\Documents\\projetos_py\\duckdb_soda_dbt\\dbt", "write_json": true, "send_anonymous_usage_stats": true, "partial_parse": true, "project_dir": "C:\\Users\\19001196\\Documents\\projetos_py\\duckdb_soda_dbt\\dbt", "vars": {}, "exclude": [], "quiet": false, "printer_width": 80, "use_colors": true, "which": "run", "enable_legacy_logger": false, "cache_selected_only": false, "log_format_file": "debug", "macro_debugging": false, "print": true, "introspect": true, "invocation_command": "dbt run", "defer": false}}